@page "/productos"

<h3 class="text-center mt-4">Gestión de Productos</h3>
@if (!isLoading)
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-secondary me-2" @onclick="OrdenarProductosPorPrecio">
            <i class="bi bi-sort-numeric-down"></i> Ordenar por Precio
        </button>
        <button class="btn btn-primary" @onclick="MostrarFormulario">
            <i class="fas fa-plus"></i>Nuevo Producto
        </button>    
    </div>
}

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="()=>mostrarAlerta=false"></button>
    </div>
}

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando productos...</p>
    </div>
}
else if (productos is null || !productos.Any())
{
    <div class="alert alert-info text-center">No hay productos disponibles</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Precio</th>
                <th>Estado</th>
                <th>Portada</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (p, index) in productos.Select((p, i) => (p, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@p.Nombre</td>
                    <td>@p.Descripcion</td>
                    <td>@p.Precio</td>
                    <td>@(p.Estado ? "Activo" : "Inactivo")</td>
                    <td>
                        @if (p.Imagenes != null && p.Imagenes.Any())
                        {
                            <img src="@($"data:image/jpeg;base64,{p.Imagenes.First().UrlImagen}")" alt="Portada" class="img-thumbnail" style="width: 100px; height: 100px;" />
                        }
                        else
                        {
                            <span>Sin portada</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-success btn-sm me-2" @onclick="() => verImagenes(p.Id)">
                            @if (p.Imagenes != null && p.Imagenes.Any())
                            {
                                <span class="fas fa-eye" aria-hidden="true"></span> <span>Imágenes</span>
                            }
                            else
                            {
                                <i class="fas fa-plus"></i> <span>Imágenes</span>
                            }
                        </button>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarProducto(p)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(p.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(productoActual.Id == 0 ? "Agregar Producto" : "Editar Producto")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="productoActual" OnValidSubmit="GuardarProducto">
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="productoActual.Nombre" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputText class="form-control" @bind-Value="productoActual.Descripcion" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Precio:</label>
                            <InputNumber class="form-control" @bind-Value="productoActual.Precio" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estado:</label>
                            <InputSelect class="form-control" @bind-Value="productoActual.Estado">
                                <option value="true">Activo</option>
                                <option value="false">Inactivo</option>
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarImagenes)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Imágenes del producto @(productoActual.Nombre)</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalImagenes"></button>
                </div>
                <div class="modal-body">
                    <CapturarImagenes ProductoId="idProductImages" OnClose="CerrarModalImagenes" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> productos = new();
    private Producto productoActual = new();
    private bool mostrarFormulario = false;
    private bool mostrarImagenes = false;
    private int idProductImages = 0;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private bool isLoading = true;

    [Inject] private ProductoService Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var url = "api/productos";
        productos = await Repository.GetAsync<List<Producto>>(url);
        isLoading = false;
    }

    private async Task OrdenarProductosPorPrecio()
    {
        isLoading = true;
        var url = "api/productos/ordenado/precio";
        productos = await Repository.GetProductosOrdenadosPorPrecio(url);
        isLoading = false;
    }

    private void MostrarFormulario()
    {
        productoActual = new Producto();
        mostrarFormulario = true;
    }

    private void verImagenes(int Id)
    {
        idProductImages = Id;
        mostrarImagenes = true;
    }

    private void EditarProducto(Producto p)
    {
        productoActual = new Producto
            {
                Id = p.Id,
                Nombre = p.Nombre,
                Descripcion = p.Descripcion,
                Precio = p.Precio,
                Estado = p.Estado
            };
        mostrarFormulario = true;
    }

    private async Task GuardarProducto()
    {
        var url1 = "api/productos";
        var url2 = $"api/productos/{productoActual.Id}";

        if (productoActual.Id == 0)
        {
            var response = await Repository.PostAsync(url1, productoActual);
        }
        else
        {
            var response = await Repository.PutAsync(url2, productoActual);
        }

        productos = await Repository.GetAsync<List<Producto>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Producto guardado correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarProducto(int id)
    {
        var url = $"api/productos/{id}";

        await Repository.DeleteAsync(url);
        productos = await Repository.GetAsync<List<Producto>>("api/productos");
        mensajeAlerta = "Producto eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private void CerrarModalImagenes()
    {
        mostrarImagenes = false;
    }
}